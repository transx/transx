<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"
       default-lazy-init="true">

	<import resource="classpath*:/META-INF/spring-orchestra-init.xml"/>

	<!-- register our custom spring scope -->
	<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
		<property name="scopes">
			<map>
				<entry key="conversation.manual">
					<bean class="org.apache.myfaces.orchestra.conversation.spring.SpringConversationScope">
						<property name="timeout" value="35"/>

						<property name="advices">
							<list>
								<ref bean="persistentContextConversationInterceptor"/>
							</list>
						</property>
					</bean>
				</entry>
                <entry key="conversation.access">
                    <bean class="org.apache.myfaces.orchestra.conversation.spring.SpringConversationScope">
                        <property name="advices">
                            <list>
                                <ref bean="persistentContextConversationInterceptor"/>
                            </list>
                        </property>
                        <property name="lifetime" value="access"/>
                    </bean>
                </entry>				
				<entry key="conversation.flash">
					<bean class="org.apache.myfaces.orchestra.conversation.spring.SpringConversationScope">
						<property name="advices">
							<list>
								<ref bean="persistentContextConversationInterceptor"/>
							</list>
						</property>
						<property name="lifetime" value="flash"/>
					</bean>
				</entry>
				<entry key="conversation.viewController">
					<bean class="org.apache.myfaces.orchestra.viewController.spring.SpringViewControllerScope">
						<property name="advices">
							<list>
								<ref bean="persistentContextConversationInterceptor"/>
							</list>
						</property>
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	
	<bean id="persistentContextConversationInterceptor"
		  class="org.apache.myfaces.orchestra.conversation.spring.PersistenceContextConversationInterceptor">
		<property name="persistenceContextFactory" ref="persistentContextFactory"/>
	</bean>

	<bean id="persistentContextFactory"
		  class="org.apache.myfaces.orchestra.conversation.spring.HibernatePersistenceContextFactory">
		<property name="entityManagerFactory" ref="sessionFactory"/>
	</bean>	

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=${hibernate.dialect}
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.cache.use_second_level_cache=true
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>
    </bean>

	<bean id="managedDataSource" class="org.apache.myfaces.orchestra.connectionManager.ConnectionManagerDataSource">
		<property name="dataSource" ref="dataSource"/>
	</bean>

    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- UniversalDao - can be used when doing standard CRUD - made available 
        for those who don't mind casting.  If you don't want to cast, look at 
        'fooDao' below. -->
    <bean id="universalDao" class="com.asta.app2.dao.hibernate.UniversalDaoHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="lookupDao" class="com.asta.app2.dao.hibernate.LookupDaoHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="userDao" class="com.asta.app2.dao.hibernate.UserDaoHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="roleDao" class="com.asta.app2.dao.hibernate.RoleDaoHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- If you want to be able to do simple CRUD for new domain objects without 
        having to cast, you don't have create a Dao interface and implementation 
        for that domain object, you simply have to do the following.  
        
        eg... 'fooDao'
    
    <bean id="fooDao" class="com.asta.app2.dao.hibernate.GenericDaoHibernate">
        <constructor-arg value="com.asta.app2.model.Foo"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    You will need to create a Dao interface and implementation for that 
        domain object if you need more than simple CRUD to occur.  
        (finders, bulk update/delete, etc.)
    -->
	
    <!-- Add new DAOs here -->

</beans>
